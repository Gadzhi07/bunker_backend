"""initial

Revision ID: 001
Revises: 
Create Date: 2024-08-04 18:38:30.008554

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def _get_game_mode_enum():
    return postgresql.ENUM('Basic', 'Advanced', name='game_mode_enum')

def _get_game_status_enum():
    return postgresql.ENUM('wait', '1', '2', '3', '4', '5', 'advanced', 'finished', name='game_status_enum')

def _get_team_side_enum():
    return postgresql.ENUM('kicked', 'not_kicked', name='team_side_enum')

def _get_bunker_card_type_enum():
    return postgresql.ENUM('BunkerCard', 'DangerCard', name='bunker_card_type_enum')


def upgrade() -> None:
    game_mode = _get_game_mode_enum()
    game_status = _get_game_status_enum()
    team_side = _get_team_side_enum()
    bunker_card_type = _get_bunker_card_type_enum()

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=150), nullable=False),
    sa.Column('count_games', sa.Integer(), server_default='0', nullable=False),
    sa.Column('number_of_wins', sa.Integer(), server_default='0', nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('game_mode', game_mode, server_default='Basic', nullable=False),
    sa.Column('count_sc_cards', sa.Integer(), nullable=False),
    sa.Column('time_to_open_card', sa.Integer(), nullable=False),
    sa.Column('speak_after_open_card', sa.Integer(), nullable=False),
    sa.Column('speak_under_vote', sa.Integer(), nullable=False),
    sa.Column('voting_time_limit', sa.Integer(), nullable=False),
    sa.Column('speak_if_equal_vote', sa.Integer(), nullable=False),
    sa.Column('speak_after_open_card_if_without_vote', sa.Integer(), nullable=False),
    sa.CheckConstraint('count_sc_cards BETWEEN 0 AND 8', name='check_count_sc_cards'),
    sa.CheckConstraint('time_to_open_card >= 10 AND speak_after_open_card >= 10 AND\n    speak_under_vote >= 10 AND voting_time_limit >= 10 AND\n    speak_if_equal_vote >= 10 AND speak_after_open_card_if_without_vote >= 0', name='check_time_limits'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('enabled_type_cards',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('settings_id', sa.Integer(), nullable=False),
    sa.Column('card_name', sa.VARCHAR(length=50), nullable=False),
    sa.ForeignKeyConstraint(['settings_id'], ['settings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('games',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('chat_id', sa.Integer(), nullable=False),
    sa.Column('settings_id', sa.Integer(), nullable=False),
    sa.Column('disaster_image_url', sa.String(), nullable=False),
    sa.Column('status', game_status, server_default='wait', nullable=False),
    sa.Column('current_queue', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['current_queue'], ['user_gamedata.id'], use_alter=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['settings_id'], ['settings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('opened_bunker_cards',
    sa.Column('game_id', sa.Uuid(), nullable=False),
    sa.Column('card_image_url', sa.String(), nullable=False),
    sa.Column('team_side', team_side, server_default='not_kicked', nullable=False),
    sa.Column('card_type', bunker_card_type, nullable=False),
    sa.Column('type_of_card_to_open', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.PrimaryKeyConstraint('game_id', 'card_image_url')
    )
    op.create_table('rounds',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Uuid(), nullable=False),
    sa.Column('needed_votes', sa.Integer(), nullable=False),
    sa.Column('type_of_card_to_open', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('votes_rounds',
    sa.Column('round_id', sa.Integer(), nullable=False),
    sa.Column('voting_id', sa.Integer(), autoincrement=True, unique=True, nullable=False),
    sa.Column('permited_to_revote', sa.Boolean(), server_default='True', nullable=False),
    sa.Column('is_this_revote_voting', sa.Boolean(), server_default='False', nullable=False),
    sa.ForeignKeyConstraint(['round_id'], ['rounds.id'], ),
    sa.PrimaryKeyConstraint('round_id', 'voting_id')
    )
    op.create_table('user_gamedata',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('go_out_voting_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], ),
    sa.ForeignKeyConstraint(['go_out_voting_id'], ['votes_rounds.voting_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('votes',
    sa.Column('vote_id', sa.Integer(), nullable=False),
    sa.Column('voting_id', sa.Integer(), nullable=False),
    sa.Column('who_voted', sa.Integer(), nullable=False),
    sa.Column('selected_user', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['selected_user'], ['users.id'], ),
    sa.ForeignKeyConstraint(['voting_id'], ['votes_rounds.voting_id'], ),
    sa.ForeignKeyConstraint(['who_voted'], ['users.id'], ),
    sa.PrimaryKeyConstraint('vote_id')
    )
    op.create_table('character_data',
    sa.Column('user_gamedata_id', sa.Integer(), nullable=False),
    sa.Column('card_name', sa.String(), nullable=False),
    sa.Column('card_value', sa.String(), nullable=False),
    sa.Column('is_opened', sa.Boolean(), server_default='False', nullable=False),
    sa.ForeignKeyConstraint(['user_gamedata_id'], ['user_gamedata.id'], ),
    sa.PrimaryKeyConstraint('user_gamedata_id', 'card_name')
    )
    op.create_table('character_sc_cards',
    sa.Column('user_gamedata_id', sa.Integer(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('special_conditions', sa.JSON(), nullable=False),
    sa.Column('voting_id_when_card_was_open', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_gamedata_id'], ['user_gamedata.id'], ),
    sa.ForeignKeyConstraint(['voting_id_when_card_was_open'], ['votes_rounds.voting_id'], ),
    sa.PrimaryKeyConstraint('user_gamedata_id', 'image_url')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('character_sc_cards')
    op.drop_table('character_data')
    op.drop_table('votes')
    op.drop_table('user_gamedata')
    op.drop_table('votes_rounds')
    op.drop_table('rounds')
    op.drop_table('opened_bunker_cards')
    op.drop_table('games')
    op.drop_table('enabled_type_cards')
    op.drop_table('settings')
    op.drop_table('users')
    # ### end Alembic commands ###

    _get_game_mode_enum().drop(op.get_bind())
    _get_game_status_enum().drop(op.get_bind())
    _get_team_side_enum().drop(op.get_bind())
    _get_bunker_card_type_enum().drop(op.get_bind())

